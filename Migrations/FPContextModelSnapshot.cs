// <auto-generated />
using System;
using FitnessProgram.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitnessProgram.Migrations
{
    [DbContext(typeof(FPContext))]
    partial class FPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExerciseEquipment", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("exercise_id");

                    b.Property<int>("EquipId")
                        .HasColumnType("int")
                        .HasColumnName("equip_id");

                    b.HasKey("ExerciseId", "EquipId")
                        .HasName("Exercise_Equipment_pk");

                    b.HasIndex("EquipId");

                    b.ToTable("Exercise_Equipment", (string)null);
                });

            modelBuilder.Entity("ExerciseMuscleGroup", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("exercise_id");

                    b.Property<int>("MuscleGroupId")
                        .HasColumnType("int")
                        .HasColumnName("muscle_group_id");

                    b.HasKey("ExerciseId", "MuscleGroupId")
                        .HasName("Exercise_MuscleGroup_pk");

                    b.HasIndex("MuscleGroupId");

                    b.ToTable("Exercise_MuscleGroup", (string)null);
                });

            modelBuilder.Entity("FitnessProgram.Models.ActiveGoal", b =>
                {
                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("goal_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.ToTable((string)null);

                    b.ToView("ActiveGoals", (string)null);
                });

            modelBuilder.Entity("FitnessProgram.Models.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("FitnessLevel")
                        .HasColumnType("int")
                        .HasColumnName("fitnessLevel");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("UserId")
                        .HasName("User_pk");

                    b.ToTable("AppUser", (string)null);
                });

            modelBuilder.Entity("FitnessProgram.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId")
                        .HasName("Category_pk");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("FitnessProgram.Models.Equipment", b =>
                {
                    b.Property<int>("EquipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("equip_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("EquipId")
                        .HasName("Equipment_pk");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("FitnessProgram.Models.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exercise_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int")
                        .HasColumnName("difficulty_level");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("instructions");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("ExerciseId")
                        .HasName("Exercise_pk");

                    b.HasIndex("CategoryId");

                    b.ToTable("Exercise", (string)null);
                });

            modelBuilder.Entity("FitnessProgram.Models.FitnessPlan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("plan_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("DurationWeeks")
                        .HasColumnType("int")
                        .HasColumnName("duration_weeks");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int")
                        .HasColumnName("trainer_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("PlanId")
                        .HasName("FitnessPlan_pk");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TrainerId");

                    b.HasIndex("UserId");

                    b.ToTable("FitnessPlan", (string)null);
                });

            modelBuilder.Entity("FitnessProgram.Models.Goal", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("goal_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoalId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("GoalId")
                        .HasName("Goal_pk");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Goal", (string)null);
                });

            modelBuilder.Entity("FitnessProgram.Models.MuscleGroup", b =>
                {
                    b.Property<int>("MuscleGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("muscle_group_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MuscleGroupId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("MuscleGroupId")
                        .HasName("MuscleGroup_pk");

                    b.ToTable("MuscleGroup", (string)null);
                });

            modelBuilder.Entity("FitnessProgram.Models.Trainer", b =>
                {
                    b.Property<int>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("trainer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainerId"));

                    b.Property<string>("Certification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.Property<int?>("YearsExperience")
                        .HasColumnType("int");

                    b.HasKey("TrainerId")
                        .HasName("Trainer_pk");

                    b.HasIndex("UserId");

                    b.ToTable("Trainer", (string)null);
                });

            modelBuilder.Entity("PlanExercise", b =>
                {
                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("plan_ID");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("exercise_id");

                    b.HasKey("PlanId", "ExerciseId")
                        .HasName("Plan_Exercise_pk");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Plan_Exercise", (string)null);
                });

            modelBuilder.Entity("UserTrainer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.Property<int>("TrainerTrainerId")
                        .HasColumnType("int")
                        .HasColumnName("Trainer_trainer_id");

                    b.HasKey("UserId", "TrainerTrainerId")
                        .HasName("User_Trainer_pk");

                    b.HasIndex("TrainerTrainerId");

                    b.ToTable("User_Trainer", (string)null);
                });

            modelBuilder.Entity("ExerciseEquipment", b =>
                {
                    b.HasOne("FitnessProgram.Models.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipId")
                        .IsRequired()
                        .HasConstraintName("Exercise_Equipment_Equipment");

                    b.HasOne("FitnessProgram.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .IsRequired()
                        .HasConstraintName("Exercise_Equipment_Exercise");
                });

            modelBuilder.Entity("ExerciseMuscleGroup", b =>
                {
                    b.HasOne("FitnessProgram.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .IsRequired()
                        .HasConstraintName("Exercise_MuscleGroup_Exercise");

                    b.HasOne("FitnessProgram.Models.MuscleGroup", null)
                        .WithMany()
                        .HasForeignKey("MuscleGroupId")
                        .IsRequired()
                        .HasConstraintName("Exercise_MuscleGroup_MuscleGroup");
                });

            modelBuilder.Entity("FitnessProgram.Models.Exercise", b =>
                {
                    b.HasOne("FitnessProgram.Models.Category", "Category")
                        .WithMany("Exercises")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("Exercise_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FitnessProgram.Models.FitnessPlan", b =>
                {
                    b.HasOne("FitnessProgram.Models.Category", "Category")
                        .WithMany("FitnessPlans")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_FitnessPlan_Category");

                    b.HasOne("FitnessProgram.Models.Trainer", "Trainer")
                        .WithMany("FitnessPlans")
                        .HasForeignKey("TrainerId")
                        .IsRequired()
                        .HasConstraintName("FK_FitnessPlan_Trainer");

                    b.HasOne("FitnessProgram.Models.AppUser", "User")
                        .WithMany("FitnessPlans")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_FitnessPlan_AppUser");

                    b.Navigation("Category");

                    b.Navigation("Trainer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessProgram.Models.Goal", b =>
                {
                    b.HasOne("FitnessProgram.Models.Category", "Category")
                        .WithMany("Goals")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Goal_Category");

                    b.HasOne("FitnessProgram.Models.AppUser", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Goal_User");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessProgram.Models.Trainer", b =>
                {
                    b.HasOne("FitnessProgram.Models.AppUser", "User")
                        .WithMany("Trainers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Trainer_AppUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlanExercise", b =>
                {
                    b.HasOne("FitnessProgram.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .IsRequired()
                        .HasConstraintName("Plan_Exercise_Exercise");

                    b.HasOne("FitnessProgram.Models.FitnessPlan", null)
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("Plan_Exercise_FitnessPlan");
                });

            modelBuilder.Entity("UserTrainer", b =>
                {
                    b.HasOne("FitnessProgram.Models.Trainer", null)
                        .WithMany()
                        .HasForeignKey("TrainerTrainerId")
                        .IsRequired()
                        .HasConstraintName("User_Trainer_Trainer");

                    b.HasOne("FitnessProgram.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("User_Trainer_User");
                });

            modelBuilder.Entity("FitnessProgram.Models.AppUser", b =>
                {
                    b.Navigation("FitnessPlans");

                    b.Navigation("Goals");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("FitnessProgram.Models.Category", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("FitnessPlans");

                    b.Navigation("Goals");
                });

            modelBuilder.Entity("FitnessProgram.Models.Trainer", b =>
                {
                    b.Navigation("FitnessPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
